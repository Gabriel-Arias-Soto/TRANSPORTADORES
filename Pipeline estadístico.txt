necesito algunas cosas: al c√≥digo "rm(list = ls())
cat("\014")

# -----------------------
# Cargar librer√≠as
# -----------------------
required_packages <- c("readr", "dplyr", "ggplot2", "tidyr", "forcats", "UpSetR", "RColorBrewer")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(required_packages, library, character.only = TRUE)

# -----------------------
# Leer y preparar datos
# -----------------------
file_path <- "C:/Users/gabri/Documents/SCRIPTS_ESTUDIO_PYTHON/TRANSPORTADORES/data_proteomas/analisis_filogenia/hmmscan_resultados/pfam_transportadores.csv"

pfam_data <- read_csv(file_path, show_col_types = FALSE) %>%
  mutate(
    Especie = sub("_.*", "", query_name),
    Familia = sub(".*_(.*)_.*", "\\1", query_name)
  )

# -----------------------
# 1. N√∫mero de dominios √∫nicos por prote√≠na
# -----------------------
dominios_por_proteina <- pfam_data %>%
  group_by(query_name) %>%
  summarise(n_dominios = n_distinct(target_name), .groups = "drop") %>%
  arrange(desc(n_dominios))

ggplot(dominios_por_proteina, aes(x = n_dominios)) +
  geom_histogram(binwidth = 1, fill = "#0072B2", alpha = 0.8) +
  geom_vline(aes(xintercept = mean(n_dominios)), color = "orange", linetype = "dashed") +
  labs(title = "Distribuci√≥n de dominios Pfam por prote√≠na", x = "N¬∞ de dominios √∫nicos", y = "Frecuencia") +
  theme_minimal()

# -----------------------
# 2. Conteo de dominios por especie
# -----------------------
conteo_dominios <- pfam_data %>%
  group_by(Especie, target_name) %>%
  summarise(n_veces = n(), .groups = "drop") %>%
  arrange(Especie, desc(n_veces))

print(conteo_dominios)

# -----------------------
# 3. Top dominios globales
# -----------------------
top_dominios <- pfam_data %>%
  count(target_name, sort = TRUE, name = "n_proteinas") %>%
  mutate(porcentaje = n_proteinas / nrow(dominios_por_proteina) * 100)

ggplot(top_dominios %>% head(15), aes(x = fct_reorder(target_name, n_proteinas), y = n_proteinas, fill = porcentaje)) +
  geom_col() +
  coord_flip() +
  scale_fill_gradient(low = "skyblue", high = "darkblue") +
  labs(title = "Top 15 dominios m√°s frecuentes", x = "Dominio", y = "N¬∞ de prote√≠nas", fill = "%") +
  theme_minimal()

# -----------------------
# 4. Distribuci√≥n de scores HMM por dominio (global)
# -----------------------
top_10_dominios <- top_dominios$target_name[1:10]

pfam_data %>%
  filter(target_name %in% top_10_dominios) %>%
  ggplot(aes(x = fct_reorder(target_name, score_full, .fun = median), y = score_full)) +
  geom_boxplot(aes(fill = target_name), alpha = 0.7, show.legend = FALSE) +
  stat_summary(fun = median, geom = "point", color = "red", size = 2) +
  labs(
    title = "Distribuci√≥n de scores HMM por dominio Pfam",
    subtitle = "Top 10 dominios m√°s frecuentes",
    x = "Dominio Pfam",
    y = "Score HMM (full)"
  ) +
  coord_flip() +
  theme_minimal()

# ----------------------------
# 5. UpSetPlot con colores √∫nicos por dominio
# ----------------------------
binaria <- pfam_data %>%
  distinct(query_name, target_name) %>%  # Elimina duplicados exactos
  mutate(presente = 1) %>%
  pivot_wider(names_from = target_name, values_from = presente, values_fill = 0)

mat <- as.data.frame(binaria)
rownames(mat) <- mat$query_name
mat$query_name <- NULL

# Crear paleta de colores con longitud exacta
dominios <- colnames(mat)
n_dominios <- length(dominios)

colores <- colorRampPalette(brewer.pal(12, "Set3"))(n_dominios)
names(colores) <- dominios

# Graficar y guardar UpSetPlot
pdf("C:/Users/gabri/Documents/SCRIPTS_ESTUDIO_PYTHON/TRANSPORTADORES/data_proteomas/analisis_filogenia/hmmscan_resultados/upset_colores_por_dominio.pdf", width = 14, height = 8)
upset(mat,
      sets = dominios,
      sets.bar.color = colores,
      matrix.color = "gray20",
      main.bar.color = "#4B0082",
      order.by = "freq",
      text.scale = 1.4,
      keep.order = TRUE)
dev.off()


cat("\n‚úÖ An√°lisis completado sin problemas.\n")" necesito que le agregues el top de dominios m√°s frecuentes, la distribuci√≥n de dominios, as√≠ como mantener el upsetplot y la distribuci√≥n de puntajes de hmm.

Para el upsetplot, tengo un asunto: Se me apilan las secuencias, b√°sicamente aparecen todas pero definir cu√°les son las m√°s interesante de mostrar el lo clave, entonces me gustar√≠a mostrar en el upsetplot las que podr√≠an indicar interacci√≥n, se puede hacer algo as√≠? o tiene que pulirse el uptsetplot aparte?


ChatGPT Plus
Excelente lo que est√°s planteando, es muy profesional. Te explico c√≥mo mejorar y modular tu script en R para que:

‚úÖ Mantenga todo lo que ya tienes:
‚úî Top de dominios m√°s frecuentes.
‚úî Distribuci√≥n de dominios √∫nicos por prote√≠na.
‚úî Distribuci√≥n de scores HMM por dominio.
‚úî UpSetPlot coloreado.

‚úÖ Y adem√°s:
‚úî El UpSetPlot solo muestre un subconjunto informativo y manejable, por ejemplo:

Las prote√≠nas con m√°s dominios.

Las prote√≠nas que contienen dominios espec√≠ficos que te interesan (posibles de indicar como candidatos a interacci√≥n).

Un filtro por score HMM si lo deseas.

üõ†Ô∏è C√≥mo se hace t√©cnicamente:
El UpSetPlot en s√≠ no interpreta "interacci√≥n" directamente, pero t√∫ puedes filtrar las secuencias que incluyes, de modo que el gr√°fico solo muestre prote√≠nas candidatas seg√∫n un criterio biol√≥gico, por ejemplo:

‚úÖ Las prote√≠nas que contienen al menos uno de los dominios del Top 5.
‚úÖ Las prote√≠nas que tienen m√°s de 2 dominios.
‚úÖ Las prote√≠nas cuyos scores HMM superan un umbral.

üéØ Te dejo el script completo optimizado y comentado, incluyendo ese filtro:
r
Copiar
Editar
rm(list = ls())
cat("\014")

# -----------------------
# Cargar librer√≠as
# -----------------------
required_packages <- c("readr", "dplyr", "ggplot2", "tidyr", "forcats", "UpSetR", "RColorBrewer")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(required_packages, library, character.only = TRUE)

# -----------------------
# Leer y preparar datos
# -----------------------
file_path <- "C:/Users/gabri/Documents/SCRIPTS_ESTUDIO_PYTHON/TRANSPORTADORES/data_proteomas/analisis_filogenia/hmmscan_resultados/pfam_transportadores.csv"

pfam_data <- read_csv(file_path, show_col_types = FALSE) %>%
  mutate(
    Especie = sub("_.*", "", query_name),
    Familia = sub(".*_(.*)_.*", "\\1", query_name)
  )

# -----------------------
# 1. N√∫mero de dominios √∫nicos por prote√≠na
# -----------------------
dominios_por_proteina <- pfam_data %>%
  group_by(query_name) %>%
  summarise(n_dominios = n_distinct(target_name), .groups = "drop") %>%
  arrange(desc(n_dominios))

ggplot(dominios_por_proteina, aes(x = n_dominios)) +
  geom_histogram(binwidth = 1, fill = "#0072B2", alpha = 0.8) +
  geom_vline(aes(xintercept = mean(n_dominios)), color = "orange", linetype = "dashed") +
  labs(title = "Distribuci√≥n de dominios Pfam por prote√≠na", x = "N¬∞ de dominios √∫nicos", y = "Frecuencia") +
  theme_minimal()

# -----------------------
# 2. Conteo de dominios por especie
# -----------------------
conteo_dominios <- pfam_data %>%
  group_by(Especie, target_name) %>%
  summarise(n_veces = n(), .groups = "drop") %>%
  arrange(Especie, desc(n_veces))

print(conteo_dominios)

# -----------------------
# 3. Top dominios globales
# -----------------------
top_dominios <- pfam_data %>%
  count(target_name, sort = TRUE, name = "n_proteinas") %>%
  mutate(porcentaje = n_proteinas / nrow(dominios_por_proteina) * 100)

ggplot(top_dominios %>% head(15), aes(x = fct_reorder(target_name, n_proteinas), y = n_proteinas, fill = porcentaje)) +
  geom_col() +
  coord_flip() +
  scale_fill_gradient(low = "skyblue", high = "darkblue") +
  labs(title = "Top 15 dominios m√°s frecuentes", x = "Dominio", y = "N¬∞ de prote√≠nas", fill = "%") +
  theme_minimal()

# -----------------------
# 4. Distribuci√≥n de scores HMM por dominio (global)
# -----------------------
top_10_dominios <- top_dominios$target_name[1:10]

pfam_data %>%
  filter(target_name %in% top_10_dominios) %>%
  ggplot(aes(x = fct_reorder(target_name, score_full, .fun = median), y = score_full)) +
  geom_boxplot(aes(fill = target_name), alpha = 0.7, show.legend = FALSE) +
  stat_summary(fun = median, geom = "point", color = "red", size = 2) +
  labs(
    title = "Distribuci√≥n de scores HMM por dominio Pfam",
    subtitle = "Top 10 dominios m√°s frecuentes",
    x = "Dominio Pfam",
    y = "Score HMM (full)"
  ) +
  coord_flip() +
  theme_minimal()

# ----------------------------
# 5. UpSetPlot filtrado y coloreado
# ----------------------------

# FILTRO: Prote√≠nas que tienen al menos uno de los dominios Top 5
dominios_interes <- top_dominios$target_name[1:5]

proteinas_filtradas <- pfam_data %>%
  filter(target_name %in% dominios_interes) %>%
  distinct(query_name) %>%
  pull(query_name)

# Crear matriz binaria solo con prote√≠nas seleccionadas
binaria <- pfam_data %>%
  filter(query_name %in% proteinas_filtradas) %>%
  distinct(query_name, target_name) %>%
  mutate(presente = 1) %>%
  pivot_wider(names_from = target_name, values_from = presente, values_fill = 0)

mat <- as.data.frame(binaria)
rownames(mat) <- mat$query_name
mat$query_name <- NULL

# Crear paleta de colores
dominios <- colnames(mat)
n_dominios <- length(dominios)
colores <- colorRampPalette(brewer.pal(12, "Set3"))(n_dominios)
names(colores) <- dominios

# Graficar y guardar
pdf("C:/Users/gabri/Documents/SCRIPTS_ESTUDIO_PYTHON/TRANSPORTADORES/data_proteomas/analisis_filogenia/hmmscan_resultados/upset_colores_filtrado.pdf", width = 14, height = 8)
upset(mat,
      sets = dominios,
      sets.bar.color = colores,
      matrix.color = "gray20",
      main.bar.color = "#4B0082",
      order.by = "freq",
      text.scale = 1.4,
      keep.order = TRUE)
dev.off()

cat("\n‚úÖ An√°lisis completado sin problemas.\n")
üß© Notas finales:
‚úî Si quieres, puedo modificar el filtro para que sea:

Basado en score m√≠nimo de HMM.

Basado en n√∫mero de dominios > X.

Solo prote√≠nas de una especie espec√≠fica.

‚úî Esto lo haces cambiando la parte de proteinas_filtradas.

¬øQuieres que te lo deje preparado con un filtro m√°s biol√≥gico o espec√≠fico? Solo dime: "quiero filtrar por..." y te lo armo.